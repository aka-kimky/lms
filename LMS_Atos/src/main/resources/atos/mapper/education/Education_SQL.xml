<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="education">

	<sql id="whereClause">
	    <trim prefix="WHERE" prefixOverrides="AND">
	        a.STATUS != '1005'  <!-- 기본 조건 -->
	        AND d.USE_YN = 'Y'  <!-- 'USE_YN' 조건은 항상 포함 -->
	        <if test="statusCode != null and statusCode != ''">
	            AND a.STATUS = #{statusCode}
	        </if>
	        <if test="searchCnd == '0'">
	            AND a.TITLE LIKE CONCAT('%', #{searchWrd}, '%')  <!-- 교육명으로 검색 -->
	        </if>
	        <if test="searchCnd == '1'">
	            AND (c.MAIN_NAME LIKE CONCAT('%', #{searchWrd}, '%')
	            OR c.SUB_NAME LIKE CONCAT('%', #{searchWrd}, '%')
	            OR c.DETAIL_NAME LIKE CONCAT('%', #{searchWrd}, '%'))  <!-- 교육분류로 검색 -->
	        </if>
	    </trim>
	</sql>

<!-- 교육 과정 리스트 조회 -->

	<select id="selectEducationList" parameterType="atos.lms.education.service.EducationVO" resultType="atos.lms.education.service.EducationVO">
	    SELECT
	        a.EDU_CODE,
	        a.TITLE,
	        a.STATUS AS statusCode,
	        s.NAME AS statusName,  <!-- 상태 명칭 -->
	        m.MAIN_NAME AS mainName,  <!-- 대분류 명칭 -->
	        sub.SUB_NAME AS subName,  <!-- 중분류 명칭 -->
	        a.TRAINING_TIME,  <!-- 교육 시간 코드 -->
	        t.NAME AS trainingTimeName,  <!-- 교육 시간 이름 -->
	        a.REG_DATE,  <!-- 등록일 추가 -->
	        a.REGISTER  <!-- 등록자 추가 -->
	    FROM
	        ATOS_EDUCATION a
	    JOIN
	        ATOS_STATUS s ON a.STATUS = s.CODE  <!-- 상태 코드와 상태 명칭 매핑 -->
	    JOIN
	        ATOS_CATEGORY_DETAIL d ON a.CATEGORY = d.CODE  <!-- 소분류 코드 매핑 -->
	    JOIN
	        ATOS_CATEGORY_MAIN m ON d.MAIN_CODE = m.MAIN_CODE  <!-- 대분류 코드 매핑 -->
	    JOIN
	        ATOS_CATEGORY_SUB sub ON d.SUB_CODE = sub.SUB_CODE  <!-- 중분류 코드 매핑 -->
	    LEFT JOIN
	        ATOS_TRAINING_TIME t ON a.TRAINING_TIME = t.CODE  <!-- 교육 시간 코드와 이름 매핑 -->
	    <include refid="whereClause" />  <!-- whereClause에 USE_YN 포함 -->
	    GROUP BY a.EDU_CODE, a.TITLE, a.STATUS, s.NAME, m.MAIN_NAME, sub.SUB_NAME, a.TRAINING_TIME, t.NAME, a.REG_DATE, a.REGISTER  -- 중복 제거
	    ORDER BY a.EDU_CODE DESC
	    LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
	</select>

<!-- 교육 과정 총 개수 조회 -->
<select id="selectEducationListCnt" parameterType="atos.lms.education.service.EducationVO" resultType="int">
    SELECT
        COUNT(a.EDU_CODE)
    FROM
        ATOS_EDUCATION a
    JOIN
        ATOS_CATEGORY_DETAIL d ON a.CATEGORY = d.CODE
    <include refid="whereClause" />  <!-- whereClause에 USE_YN 포함 -->
</select>

<!-- 상태 코드 조회 -->
    <select id="selectStatusCode" resultType="atos.lms.education.service.EducationMasterVO">
        SELECT
            CODE AS statusCode,
            NAME AS statusName
        FROM
            ATOS_STATUS
        WHERE CODE IN ('1001', '1002', '1003', '1004')
    </select>
	
<!-- 상태 업데이트 쿼리 -->
	 <update id="updateStatus">
	    UPDATE ATOS_EDUCATION
	    SET STATUS = #{statusCode}
	    WHERE EDU_CODE IN
	    <foreach item="eduCode" collection="eduCodeList" open="(" separator="," close=")">
	        #{eduCode}
	    </foreach>
	 </update>
	
<!-- 교육 과정 등록 -->
	<insert id="insertEducation" parameterType="atos.lms.education.service.EducationVO">
	    INSERT INTO ATOS_EDUCATION(
	        TITLE, 
	        CATEGORY, 
	        DESCRIPTION,
	        OBJECTIVE, 
	        COMPLETION_CRITERIA, 
	        NOTE, 
	        STATUS,
	        TRAINING_TIME,
	        REG_DATE,  <!-- 등록일 추가 -->
	        REGISTER  <!-- 등록자 추가 -->
	    )
	    VALUES(
	        #{title}, 
	        #{category}, 
	        #{description}, 
	        #{objective}, 
	        #{completionCriteria},
	        #{note}, 
	        '1002',  <!-- 상태는 기본값으로 1002 설정 -->
	        #{trainingTime}, 
	        NOW(),  <!-- 등록일은 현재 시간으로 설정 -->
	        #{register}  <!-- 등록자 값 설정 -->
	    )
	</insert>
    
    
    
	<select id="selectAllCategoryList" resultType="atos.lms.education.service.EducationVO">
	    SELECT 
	        d.CODE,  <!-- 세부 정보 코드 -->
	        m.MAIN_CODE, m.MAIN_NAME,  <!-- 대분류 코드 및 명칭 -->
	        sub.SUB_CODE, sub.SUB_NAME  <!-- 중분류 코드 및 명칭 -->
	    FROM ATOS_CATEGORY_DETAIL d
	    JOIN ATOS_CATEGORY_MAIN m ON d.MAIN_CODE = m.MAIN_CODE  <!-- 대분류 코드로 조인 -->
	    JOIN ATOS_CATEGORY_SUB sub ON d.SUB_CODE = sub.SUB_CODE  <!-- 중분류 코드로 조인 -->
	    WHERE d.USE_YN = 'Y'  <!-- 사용 여부 필터링 -->
	    GROUP BY d.CODE, m.MAIN_CODE, sub.SUB_CODE  <!-- 그룹화하여 중복 제거 -->
	    ORDER BY m.MAIN_CODE, sub.SUB_CODE, d.CODE
	</select>


	<select id="selectTrainingTimeList" resultType="map">
	    SELECT
	        CODE AS value,
	        NAME AS label
	    FROM
	        ATOS_TRAINING_TIME
	    ORDER BY
	        CODE ASC
	</select>

    
<!-- 수료 조건 조회 쿼리 추가 -->
	<select id="selectCompletionCriteria" resultType="atos.lms.education.service.EducationMasterVO">
	    SELECT
	        CODE AS completionCode,
	        RATE AS completionRate,
	        SCORE AS completionScore,
	        SURVEY AS completionSurvey
	    FROM
	        ATOS_COMPLETION_CRITERIA
	</select>
	
	
	
	
<select id="selectEducationListForExcel" parameterType="atos.lms.education.service.EducationVO" resultType="atos.lms.education.service.EducationExcelVO">
    SELECT
        a.TITLE AS title,                            <!-- 교육명 -->
        CONCAT_WS(' > ', m.MAIN_NAME, sub.SUB_NAME) AS category,  <!-- 교육 분류 명칭 (대분류 > 중분류) -->
        a.DESCRIPTION AS description,                <!-- 과정소개 -->
        a.OBJECTIVE AS objective,                    <!-- 과정목표 -->
        CONCAT_WS('/', IFNULL(c.RATE, 'N/A'), IFNULL(c.SCORE, 'N/A'), IFNULL(c.SURVEY, 'N/A')) AS completionCriteria, <!-- 수료조건 (진도율/시험 점수/설문 유무) -->
        a.NOTE AS note,                              <!-- 비고 -->
        s.NAME AS status,                            <!-- 상태명 -->
        t.NAME AS trainingTime,                      <!-- 교육시간 -->
        a.REG_DATE AS regDate,                       <!-- 등록일 -->
        a.REGISTER AS register                       <!-- 등록자 -->
    FROM
        ATOS_EDUCATION a
    LEFT JOIN
        ATOS_COMPLETION_CRITERIA c ON a.COMPLETION_CRITERIA = c.CODE  <!-- 수료 조건과 JOIN -->
    JOIN
        ATOS_CATEGORY_DETAIL d ON a.CATEGORY = d.CODE  <!-- 대분류, 중분류 코드와 명칭을 JOIN -->
    JOIN
        ATOS_CATEGORY_MAIN m ON d.MAIN_CODE = m.MAIN_CODE  <!-- 대분류 -->
    JOIN
        ATOS_CATEGORY_SUB sub ON d.SUB_CODE = sub.SUB_CODE  <!-- 중분류 -->
    LEFT JOIN
        ATOS_STATUS s ON a.STATUS = s.CODE  <!-- 상태 코드와 명칭을 JOIN -->
    LEFT JOIN
        ATOS_TRAINING_TIME t ON a.TRAINING_TIME = t.CODE  <!-- 교육시간 코드와 명칭을 JOIN -->
    WHERE
        a.STATUS != '1005'  <!-- 삭제된 상태는 제외 -->
    ORDER BY
        a.REG_DATE DESC  <!-- 등록일 기준 내림차순 정렬 -->
</select>

	
	
	

</mapper>